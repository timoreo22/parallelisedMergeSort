TODO:
[X] - Make class to handle arrays at each layer
[/] - Implement array splitting
[ ] - Implement array combining
[ ] - Complete mergesort
[ ] - Parallelize each layers
[ ] - FINISH

Planning:
[1] Layer 0 = base array
[2] Layer 1 = 2 sub arrays of Layer 0
[4] Layer 2 = 2 sub arrays of each Layer 1
[8] Layer 3 = 2 sub arrays of each Layer 2 
...
[2^N] Layer [N] = 2 sub arrays of 1 element each

Class would need: 2 instances of itself, definied when MAIN ARRAY is not a single element, pointer to upper class (to alter/Go back to), and indicator if sorted or not.

PLAN: Use a stack to define jobs.

Rough pseudocode:

	/* DEFINE STACK HERE, GIVE EACH ARRAY A LAYER NUMBER.
	* 
	* Generation:
	*	SET MAIN ARRAY AS "NEW TASK"
	*	loop
	*	COPY LIST OF NEW TASKS TO SORT STACK.
	*	MOVE "New Tasks" TO "Current tasks".
	*	SPLIT ARRAYS AND ADD NEW SUB ARRAYS TO "NEW TASKS" LIST AS TASK.
	*	Arrays of size one are skipped and not added as new jobs. 
	*	To prevent odd arrays triggering this, a pass would be done to see if any new jobs are created.
	*	if no new jobs are created then end subarray generation.
	* 
	* Sorting:
	*	MANAGER THREAD GIVES JOBS off the stack UNTIL THE stack task LAYER NUMBER IS LESS THAN the manager thread's CURRENT task NUMBER.
	*	CALL BARRIER UNTIL ALL THREADS AVALIABLE, THEN PROCEED ON NEXT/PREVIOUS LAYER and assign jobs until out.
	*	THIS SHOULD AVOID RACE CONDITIONS AND SATISFY REQUIREMENTS.
	*	Kill subarrays as they're finished sorting to save memory.
	*	Once tasks have run out (the array sorted): Kill/Merge/Join threads into main and display sorted result.
	*/
